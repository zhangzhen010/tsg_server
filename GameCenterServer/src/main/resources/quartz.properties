# 实例名称
org.quartz.scheduler.instanceName="Server"
# 指定线程名字
org.quartz.scheduler.threadName="MyScheduler"
# 指定scheduler的主线程是否为后台线程。
org.quartz.scheduler.makeSchedulerThreadDaemon=false
# 线程数
org.quartz.threadPool.threadCount=1
# 任务调度器存储使用的类型(可以是RAMJobStore或JDBCJobStore。默认情况下，Quartz使用RAMJobStore(内存)作为存储类型。但是，这意味着应用程序停止，调度器中的所有信息都将被删除。)
org.quartz.jobStore.class=org.quartz.simpl.RAMJobStore
# 加载 Job 和 Trigger 信息的类
org.quartz.plugin.jobInitializer.class=org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin
# 指定存放调度器(Job 和 Trigger)信息的xml文件，默认是classpath下quartz_jobs.xml
org.quartz.plugin.jobInitializer.fileNames=jobs.xml

# scheduler实例的标志id，必须是全局唯一的，即使在集群环境中”逻辑”相同的scheduler。 或者可以使用“SYS_PROP”通过系统属性设置id。
#org.quartz.scheduler.instanceId=AUTO
# 线程池的名字。可以使用后Quartz 的 “org.quartz.simpl.SimpleThreadPool”。
#org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 线程优先级，Thread.MIN_PRIORITY (1) and Thread.MAX_PRIORITY (10)之间，默认Thread.NORM_PRIORITY (5)。
#org.quartz.threadPool.threadPriority=5
# 单位为毫秒，集群中的节点退出后，再次检查进入的时间间隔
#org.quartz.jobStore.misfireThreshold=60000
#org.quartz.plugin.jobInitializer.failOnFileNotFound=true
#org.quartz.plugin.jobInitializer.scanInterval=10
#org.quartz.plugin.jobInitializer.wrapInUserTransaction=false
#org.quartz.scheduler.skipUpdateCheck=true